// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LAYERBYLAYERSCHEMA_H_
#define FLATBUFFERS_GENERATED_LAYERBYLAYERSCHEMA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct TensorData;
struct TensorDataBuilder;

struct SubgraphData;
struct SubgraphDataBuilder;

struct ModelTestData;
struct ModelTestDataBuilder;

enum TensorTypes : int8_t {
  TensorTypes_FLOAT32 = 0,
  TensorTypes_FLOAT16 = 1,
  TensorTypes_INT32 = 2,
  TensorTypes_UINT8 = 3,
  TensorTypes_INT64 = 4,
  TensorTypes_STRING = 5,
  TensorTypes_BOOL = 6,
  TensorTypes_INT16 = 7,
  TensorTypes_COMPLEX64 = 8,
  TensorTypes_INT8 = 9,
  TensorTypes_FLOAT64 = 10,
  TensorTypes_COMPLEX128 = 11,
  TensorTypes_UINT64 = 12,
  TensorTypes_RESOURCE = 13,
  TensorTypes_VARIANT = 14,
  TensorTypes_UINT32 = 15,
  TensorTypes_UINT16 = 16,
  TensorTypes_INT4 = 17,
  TensorTypes_BFLOAT16 = 18,
  TensorTypes_INT2 = 19,
  TensorTypes_MIN = TensorTypes_FLOAT32,
  TensorTypes_MAX = TensorTypes_INT2
};

inline const TensorTypes (&EnumValuesTensorTypes())[20] {
  static const TensorTypes values[] = {
    TensorTypes_FLOAT32,
    TensorTypes_FLOAT16,
    TensorTypes_INT32,
    TensorTypes_UINT8,
    TensorTypes_INT64,
    TensorTypes_STRING,
    TensorTypes_BOOL,
    TensorTypes_INT16,
    TensorTypes_COMPLEX64,
    TensorTypes_INT8,
    TensorTypes_FLOAT64,
    TensorTypes_COMPLEX128,
    TensorTypes_UINT64,
    TensorTypes_RESOURCE,
    TensorTypes_VARIANT,
    TensorTypes_UINT32,
    TensorTypes_UINT16,
    TensorTypes_INT4,
    TensorTypes_BFLOAT16,
    TensorTypes_INT2
  };
  return values;
}

inline const char * const *EnumNamesTensorTypes() {
  static const char * const names[21] = {
    "FLOAT32",
    "FLOAT16",
    "INT32",
    "UINT8",
    "INT64",
    "STRING",
    "BOOL",
    "INT16",
    "COMPLEX64",
    "INT8",
    "FLOAT64",
    "COMPLEX128",
    "UINT64",
    "RESOURCE",
    "VARIANT",
    "UINT32",
    "UINT16",
    "INT4",
    "BFLOAT16",
    "INT2",
    nullptr
  };
  return names;
}

inline const char *EnumNameTensorTypes(TensorTypes e) {
  if (::flatbuffers::IsOutRange(e, TensorTypes_FLOAT32, TensorTypes_INT2)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTensorTypes()[index];
}

struct TensorData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TensorDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT_INDEX = 4,
    VT_TENSOR_INDEX = 6,
    VT_SHAPE = 8,
    VT_DTYPE = 10,
    VT_DATA = 12,
    VT_NUM_BYTES = 14,
    VT_LAYER_NUMBER = 16
  };
  uint32_t input_index() const {
    return GetField<uint32_t>(VT_INPUT_INDEX, 0);
  }
  uint32_t tensor_index() const {
    return GetField<uint32_t>(VT_TENSOR_INDEX, 0);
  }
  const ::flatbuffers::Vector<int32_t> *shape() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_SHAPE);
  }
  TensorTypes dtype() const {
    return static_cast<TensorTypes>(GetField<int8_t>(VT_DTYPE, 0));
  }
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  uint32_t num_bytes() const {
    return GetField<uint32_t>(VT_NUM_BYTES, 0);
  }
  uint32_t layer_number() const {
    return GetField<uint32_t>(VT_LAYER_NUMBER, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_INPUT_INDEX, 4) &&
           VerifyField<uint32_t>(verifier, VT_TENSOR_INDEX, 4) &&
           VerifyOffset(verifier, VT_SHAPE) &&
           verifier.VerifyVector(shape()) &&
           VerifyField<int8_t>(verifier, VT_DTYPE, 1) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           VerifyField<uint32_t>(verifier, VT_NUM_BYTES, 4) &&
           VerifyField<uint32_t>(verifier, VT_LAYER_NUMBER, 4) &&
           verifier.EndTable();
  }
};

struct TensorDataBuilder {
  typedef TensorData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_input_index(uint32_t input_index) {
    fbb_.AddElement<uint32_t>(TensorData::VT_INPUT_INDEX, input_index, 0);
  }
  void add_tensor_index(uint32_t tensor_index) {
    fbb_.AddElement<uint32_t>(TensorData::VT_TENSOR_INDEX, tensor_index, 0);
  }
  void add_shape(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> shape) {
    fbb_.AddOffset(TensorData::VT_SHAPE, shape);
  }
  void add_dtype(TensorTypes dtype) {
    fbb_.AddElement<int8_t>(TensorData::VT_DTYPE, static_cast<int8_t>(dtype), 0);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(TensorData::VT_DATA, data);
  }
  void add_num_bytes(uint32_t num_bytes) {
    fbb_.AddElement<uint32_t>(TensorData::VT_NUM_BYTES, num_bytes, 0);
  }
  void add_layer_number(uint32_t layer_number) {
    fbb_.AddElement<uint32_t>(TensorData::VT_LAYER_NUMBER, layer_number, 0);
  }
  explicit TensorDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TensorData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TensorData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TensorData> CreateTensorData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t input_index = 0,
    uint32_t tensor_index = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> shape = 0,
    TensorTypes dtype = TensorTypes_FLOAT32,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0,
    uint32_t num_bytes = 0,
    uint32_t layer_number = 0) {
  TensorDataBuilder builder_(_fbb);
  builder_.add_layer_number(layer_number);
  builder_.add_num_bytes(num_bytes);
  builder_.add_data(data);
  builder_.add_shape(shape);
  builder_.add_tensor_index(tensor_index);
  builder_.add_input_index(input_index);
  builder_.add_dtype(dtype);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TensorData> CreateTensorDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t input_index = 0,
    uint32_t tensor_index = 0,
    const std::vector<int32_t> *shape = nullptr,
    TensorTypes dtype = TensorTypes_FLOAT32,
    const std::vector<uint8_t> *data = nullptr,
    uint32_t num_bytes = 0,
    uint32_t layer_number = 0) {
  auto shape__ = shape ? _fbb.CreateVector<int32_t>(*shape) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return CreateTensorData(
      _fbb,
      input_index,
      tensor_index,
      shape__,
      dtype,
      data__,
      num_bytes,
      layer_number);
}

struct SubgraphData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SubgraphDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OUTPUTS = 4,
    VT_SUBGRAPH_INDEX = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<TensorData>> *outputs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<TensorData>> *>(VT_OUTPUTS);
  }
  uint32_t subgraph_index() const {
    return GetField<uint32_t>(VT_SUBGRAPH_INDEX, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OUTPUTS) &&
           verifier.VerifyVector(outputs()) &&
           verifier.VerifyVectorOfTables(outputs()) &&
           VerifyField<uint32_t>(verifier, VT_SUBGRAPH_INDEX, 4) &&
           verifier.EndTable();
  }
};

struct SubgraphDataBuilder {
  typedef SubgraphData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_outputs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<TensorData>>> outputs) {
    fbb_.AddOffset(SubgraphData::VT_OUTPUTS, outputs);
  }
  void add_subgraph_index(uint32_t subgraph_index) {
    fbb_.AddElement<uint32_t>(SubgraphData::VT_SUBGRAPH_INDEX, subgraph_index, 0);
  }
  explicit SubgraphDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SubgraphData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SubgraphData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SubgraphData> CreateSubgraphData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<TensorData>>> outputs = 0,
    uint32_t subgraph_index = 0) {
  SubgraphDataBuilder builder_(_fbb);
  builder_.add_subgraph_index(subgraph_index);
  builder_.add_outputs(outputs);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SubgraphData> CreateSubgraphDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<TensorData>> *outputs = nullptr,
    uint32_t subgraph_index = 0) {
  auto outputs__ = outputs ? _fbb.CreateVector<::flatbuffers::Offset<TensorData>>(*outputs) : 0;
  return CreateSubgraphData(
      _fbb,
      outputs__,
      subgraph_index);
}

struct ModelTestData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ModelTestDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT_DATA = 4,
    VT_SUBGRAPH_DATA = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<TensorData>> *input_data() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<TensorData>> *>(VT_INPUT_DATA);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<SubgraphData>> *subgraph_data() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<SubgraphData>> *>(VT_SUBGRAPH_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INPUT_DATA) &&
           verifier.VerifyVector(input_data()) &&
           verifier.VerifyVectorOfTables(input_data()) &&
           VerifyOffset(verifier, VT_SUBGRAPH_DATA) &&
           verifier.VerifyVector(subgraph_data()) &&
           verifier.VerifyVectorOfTables(subgraph_data()) &&
           verifier.EndTable();
  }
};

struct ModelTestDataBuilder {
  typedef ModelTestData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_input_data(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<TensorData>>> input_data) {
    fbb_.AddOffset(ModelTestData::VT_INPUT_DATA, input_data);
  }
  void add_subgraph_data(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SubgraphData>>> subgraph_data) {
    fbb_.AddOffset(ModelTestData::VT_SUBGRAPH_DATA, subgraph_data);
  }
  explicit ModelTestDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ModelTestData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ModelTestData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ModelTestData> CreateModelTestData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<TensorData>>> input_data = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SubgraphData>>> subgraph_data = 0) {
  ModelTestDataBuilder builder_(_fbb);
  builder_.add_subgraph_data(subgraph_data);
  builder_.add_input_data(input_data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ModelTestData> CreateModelTestDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<TensorData>> *input_data = nullptr,
    const std::vector<::flatbuffers::Offset<SubgraphData>> *subgraph_data = nullptr) {
  auto input_data__ = input_data ? _fbb.CreateVector<::flatbuffers::Offset<TensorData>>(*input_data) : 0;
  auto subgraph_data__ = subgraph_data ? _fbb.CreateVector<::flatbuffers::Offset<SubgraphData>>(*subgraph_data) : 0;
  return CreateModelTestData(
      _fbb,
      input_data__,
      subgraph_data__);
}

inline const ModelTestData *GetModelTestData(const void *buf) {
  return ::flatbuffers::GetRoot<ModelTestData>(buf);
}

inline const ModelTestData *GetSizePrefixedModelTestData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ModelTestData>(buf);
}

inline bool VerifyModelTestDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ModelTestData>(nullptr);
}

inline bool VerifySizePrefixedModelTestDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ModelTestData>(nullptr);
}

inline void FinishModelTestDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ModelTestData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedModelTestDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ModelTestData> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_LAYERBYLAYERSCHEMA_H_
